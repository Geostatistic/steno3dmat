classdef Surface < steno3d.core.CompositeResource
%SURFACE Steno3d Surface composite resource

    properties (Hidden, SetAccess = immutable)
        SurfaceProps = {                                                ...
            struct(                                                     ...
                'Name', 'Mesh',                                         ...
                'Type', @props.Union,                                   ...
                'Doc', 'Surface mesh',                                  ...
                'PropTypes', {{struct(                                  ...
                    'Type', @props.Instance,                            ...
                    'Class', @steno3d.core.Mesh2D                       ...
                ), struct(                                              ...
                    'Type', @props.Instance,                            ...
                    'Class', @steno3d.core.Mesh2DGrid                   ...
                )}},                                                    ...
                'Required', true                                        ...
            ), struct(                                                  ...
                'Name', 'Data',                                         ...
                'Type', @props.Repeated,                                ...
                'Doc', 'Surface data',                                  ...
                'PropType', struct(                                     ...
                    'Type', @props.Instance,                            ...
                    'Class', @steno3d.core.binders.SurfaceBinder,       ...
                    'Initialize', false                                 ...
                ),                                                      ...
                'Required', false                                       ...
            ), struct(                                                  ...
                'Name', 'Textures',                                     ...
                'Type', @props.Repeated,                                ...
                'Doc', 'Surface textures',                              ...
                'PropType', struct(                                     ...
                    'Type', @props.Instance,                            ...
                    'Class', @steno3d.core.Texture2DImage,              ...
                    'Initialize', false                                 ...
                ),                                                      ...
                'Required', false                                       ...
            ), struct(                                                  ...
                'Name', 'Opts',                                         ...
                'Type', @props.Instance,                                ...
                'Doc', 'Surface Options',                               ...
                'Class', @steno3d.core.opts.SurfaceOptions,             ...
                'Required', false                                       ...
            )                                                           ...
        }
    end

    methods
        function obj = Surface(varargin)
            obj = obj@steno3d.core.CompositeResource(varargin{:});
        end
    end

    methods (Hidden)
        function plot(obj)
            if isa(obj.Mesh, 'steno3d.core.Mesh2D')
                verts = obj.Mesh.Vertices;
                faces = obj.Mesh.Triangles;
            else
                lh1 = length(obj.Mesh.H1);
                lh2 = length(obj.Mesh.H2);
                h1 = repmat([0 cumsum(obj.Mesh.H1)], lh2+1, 1)';
                h2 = repmat([0 cumsum(obj.Mesh.H2)], lh1+1, 1);
                u = obj.Mesh.U;
                v = obj.Mesh.V;
                u = u/sqrt(sum(u.^2));
                v = v/sqrt(sum(v.^2));
                verts = h1(:)*u + h2(:)*v + ones(size(h1(:)))*obj.Mesh.O;
                if ~isempty(obj.Mesh.Z)
                    z = cross(u, v);
                    z = z/sqrt(sum(z.^2));
                    verts = verts + obj.Mesh.Z*z;
                end

                f = 1:lh1;
                f = [f; f+1; f+lh1+2; f+lh1+1]';
                faces = repmat(f, lh2, 1);
                offset = (lh1+1)*(0:lh2-1);
                offset = ones(lh1, 1) * offset;
                faces = faces + offset(:)*ones(1, 4);

            end

            if isempty(obj.Data)
                cdata = {'FaceColor', obj.Opts.Color/255};
            elseif strcmp(obj.Data{1}.Location, 'N')
                cdata = {'CData', obj.Data{1}.Data.Array,               ...
                         'FaceColor', 'interp'};
            else
                ccarr = obj.Data{1}.Data.Array;
                narr = ccarr(1)*ones(size(verts, 1), 1);
                narr(faces(:, 1)) = ccarr;
                cdata = {'CData', narr, 'FaceColor', 'flat'};
            end

            if obj.Mesh.Opts.Wireframe
                ec = [0 0 0];
            else
                ec = 'none';
            end

            patch('Vertices', verts, 'Faces', faces, cdata{:},          ...
                  'EdgeColor', ec, 'FaceAlpha', obj.Opts.Opacity);
        end
    end
end

