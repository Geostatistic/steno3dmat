classdef Line < steno3d.core.CompositeResource
%LINE Low-level Steno3D Line resource
%   Lines are 1D resources. Their geometry is defined by a %%%ref[Mesh1D](steno3d.core.Mesh1D) as
%   Vertices and connecting Segments. They may have %%%ref[Data](steno3d.core.DataArray) that is either
%   defined on the vertices (nodes) or the segments (cell-centers). There
%   are several %%%ref[line options](steno3d.core.opts.LineOptions) and %%%ref[mesh options](steno3d.core.opts.Mesh1DOptions) available for customizing the
%   appearance.
%
%   `Line` resources can also be created through a high-level functional
%   interface with %%%func[steno3d.line](steno3d.line).
%
%   %%%properties
%
%   See the %%%ref[EXAMPLES](steno3d.core.examples.line)
%
%   %%%seealso STENO3D.LINE, STENO3D.CORE.MESH1D, STENO3D.CORE.BINDERS,
%   STENO3D.CORE.OPTS.LINEOPTIONS, STENO3D.CORE.COMPOSITERESOURCE,
%   STENO3D.CORE.PROJECT
%


    properties (Hidden, SetAccess = immutable)
        LineProps = {                                                   ...
            struct(                                                     ...
                'Name', 'Mesh',                                         ...
                'Type', @props.Instance,                                ...
                'Doc', 'Structure of the line resource',                ...
                'Class', @steno3d.core.Mesh1D,                          ...
                'Required', true                                        ...
            ), struct(                                                  ...
                'Name', 'Data',                                         ...
                'Type', @props.Repeated,                                ...
                'Doc', 'Data defined on the line resource',             ...
                'PropType', struct(                                     ...
                    'Type', @props.Instance,                            ...
                    'Class', @steno3d.core.binders.LineBinder,          ...
                    'Initialize', false                                 ...
                ),                                                      ...
                'Required', false                                       ...
            ), struct(                                                  ...
                'Name', 'Opts',                                         ...
                'Type', @props.Instance,                                ...
                'Doc', 'Options for the line resource',                 ...
                'Class', @steno3d.core.opts.LineOptions,                ...
                'Required', false                                       ...
            )                                                           ...
        }
    end

    methods
        function obj = Line(varargin)
            obj = obj@steno3d.core.CompositeResource(varargin{:});
        end
    end

    methods (Hidden)
        function plot(obj, ax)
            if isempty(obj.Data)
                cdata = {'EdgeColor', obj.Opts.Color/255};
            elseif strcmp(obj.Data{1}.Location, 'CC')
                ccarr = obj.Data{1}.Data.Array;
                narr = ccarr(1)*ones(size(obj.Mesh.Vertices, 1), 1);
                narr(obj.Mesh.Segments(:, 1)) = ccarr;
                cdata = {'CData', narr, 'EdgeColor', 'flat'};
            else
                cdata = {'CData', obj.Data{1}.Data.Array,               ...
                         'EdgeColor', 'interp'};
            end
            if strcmp(obj.Mesh.Opts.ViewType, 'tube')
                cdata = [cdata {'LineWidth', 5}];
            end
            patch('Parent', ax, 'Faces', obj.Mesh.Segments,             ...
                  'Vertices', obj.Mesh.Vertices, cdata{:},              ...
                  'EdgeAlpha', obj.Opts.Opacity, 'FaceColor', 'w');
        end
    end
end

