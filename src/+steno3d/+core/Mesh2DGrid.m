classdef Mesh2DGrid < steno3d.core.UserContent
%MESH2DGRID Mesh for gridded Steno3D Surface resources
%   This mesh provides the geometry for gridded %%%ref[Surface](steno3d.core.Surface) resources. The grid
%   cell widths are given by two arrays H1 and H2. By default, these
%   correspond to the x- and y-direction, respectively, and the surface
%   exists as a horizontal plane. However, alternative U- and V-axis
%   vectors can be defined to orient the plane in any direction.
%
%   In addition to setting the axes, the `Mesh2DGrid` can be given any origin
%   point and can have node topography perpendicular to the surface (in the
%   U-cross-V direction, z-direction by default). The ordering for node
%   topography must be row-major, c-ordering. `Mesh2DGrid` has additional
%   %%%ref[options](steno3d.core.opts.Mesh2DOptions) to customize the appearance of the surface.
%
%   %%%properties
%
%   See the %ref[EXAMPLES](steno3d.examples.core.surface)
%
%   %%%seealso steno3d.core.Surface, steno3d.core.opts.Mesh2DOptions
%


    properties (Hidden, SetAccess = immutable)
        M2DProps = {                                                    ...
            struct(                                                     ...
                'Name', 'H1',                                           ...
                'Type', @props.Array,                                   ...
                'Doc', 'Grid cell widths in the U-direction',           ...
                'Shape', {{'*', 1}},                                    ...
                'Binary', false,                                        ...
                'Required', true                                        ...
            ), struct(                                                  ...
                'Name', 'H2',                                           ...
                'Type', @props.Array,                                   ...
                'Doc', 'Grid cell widths in the V-direction',           ...
                'Shape', {{'*', 1}},                                    ...
                'Binary', false,                                        ...
                'Required', true                                        ...
            ), struct(                                                  ...
                'Name', 'O',                                            ...
                'Type', @props.Vector,                                  ...
                'Doc', 'Origin point from which H1- and H2-axes extend',...
                'Required', true                                        ...
            ), struct(                                                  ...
                'Name', 'U',                                            ...
                'Type', @props.Vector,                                  ...
                'Doc', 'Orientation of H1 axis',                        ...
                'DefaultValue', 'X',                                    ...
                'Required', true                                        ...
            ), struct(                                                  ...
                'Name', 'V',                                            ...
                'Type', @props.Vector,                                  ...
                'Doc', 'Orientation of H2 axis',                        ...
                'DefaultValue', 'Y',                                    ...
                'Required', true                                        ...
            ), struct(                                                  ...
                'Name', 'Z',                                            ...
                'Type', @props.Array,                                   ...
                'Doc', 'Node topography perpendicular to the surface',  ...
                'Shape', {{'*', 1}},                                    ...
                'Binary', true,                                         ...
                'Required', false                                       ...
            ), struct(                                                  ...
                'Name', 'Opts',                                         ...
                'Type', @props.Instance,                                ...
                'Doc', 'Options for the mesh',                          ...
                'Class', @steno3d.core.opts.Mesh2DOptions,              ...
                'Required', false                                       ...
            )                                                           ...
        }
    end

    methods
        function obj = Mesh2DGrid(varargin)
            obj = obj@steno3d.core.UserContent(varargin{:});
        end
        function n = nN(obj)
            n = (length(obj.H1) + 1) * (length(obj.H2) + 1);
        end
        function n = nC(obj)
            n = length(obj.H1) * length(obj.H2);
        end
        function n = nbytes(obj)
            n = length(obj.H1)*8 + length(obj.H2)*8 + length(obj.Z(:))*8;
        end
    end

    methods (Hidden)
        function validator(obj)
            if ~isempty(obj.Z) && length(obj.Z) ~= obj.nN
                error('steno3d:mesh2DGridError', ['Length of Z '        ...
                      '(currently ' num2str(length(obj.Z)) ') must '    ...
                      'equal number of nodes (' num2str(obj.nN) ')']);
            end
            if steno3d.utils.User.isLoggedIn()
                user = steno3d.utils.User.currentUser();
                sz = max([obj.([obj.PROP_PREFIX 'H1']).nbytes           ...
                          obj.([obj.PROP_PREFIX 'H2']).nbytes           ...
                          obj.([obj.PROP_PREFIX 'Z']).nbytes]);
                if sz > user.FileSizeLimit
                    error('steno3d:mesh2DGridError',                    ...
                          ['File size ' num2str(sz) ' bytes exceeds '   ...
                           'file limit of ' num2str(user.FileSizeLimit) ...
                           ' bytes']);
                end
            end
        end

        function args = uploadArgs(obj)
            args = {'tensors', ['{"h1": ' obj.PR_H1.serialize()         ...
                                ', "h2": ' obj.PR_H2.serialize()        ...
                                '}'],                                   ...
                    'OUV', ['{"O": ' obj.PR_O.serialize()               ...
                            ', "U": ' obj.PR_U.serialize()              ...
                            ', "V": ' obj.PR_V.serialize() '}']};
            if ~isempty(obj.Z)
                zStruct = obj.PR_Z.serialize();
                args = [args, {'Z', zStruct.FileID,                     ...
                               'ZType', zStruct.DType}];
            end
            args = [args, uploadArgs@steno3d.core.UserContent(obj)];
        end
    end

end

