function autodoc(htobj)
%AUTODOC This function auto-documents a HasProps class
%   PROPS.AUTODOC(HASPROPSOBJ) overwrites the docstring for the class of
%   HASPROPSOBJ with a docstring based on its props.
%
%   WARNING: This function should be used very carefully as it overwrites
%   the documentation in the source file. However, it does allow review
%   before overwriting. It is best to use this function with some
%   oversight; run AUTODOC, inspect the output, approve if ok, and manually
%   tweak lines so they are the correct length, correctly spaced, etc.
%
%   For AUTODOC to work correctly, the first line of the file must be the
%   classdef line; it will error otherwise. The documentation block must
%   follow immediately after that, again erroring otherwise. AUTODOC keeps
%   all of the documentation block until it encounters a comment line
%   that is empty aside from the starting '%'. It then replaces the rest of
%   the comment block with autogenerated documentation until it encounters
%   either (1) the end of the comment block or (2) see also line beginning
%   with '%   %%%seealso' (note the spacing must be exact). Everything below
%   this is maintained. If no see also line is encountered, one is
%   generated with the included prop types.
%
%   If there is no empty comment line in the initial documentation block,
%   the autogenerated documentation will simply be appended, and nothing
%   will be lost.
%
%   In order to maintain consistency when copying the file, % and \ escape
%   characters must be added. If any other unusual characters are present
%   in a class, the user must ensure that they are copied correctly.
%   Again, AUTODOC gives the user a chance to review the newly documented
%   file before it overwrites the old file.
%
%   Example:
%
%       classdef HasPropsSubClass < props.HasProps
%       %HASPROPSSUBCLASS Class to be autodocumented
%       %   This class has some props and probably does something
%       %   interesting but really it is only here for a documentation
%       %   example. This paragraph will persist during auto-documentation.
%       %
%       %   ALL
%       %   OF
%       %   THIS
%       %   WILL
%       %   BE
%       %   REPLACED!
%       %
%       %   THIS TOO.
%       %
%       %   %%%seealso props.HasProps, this line is saved
%       %   along with everything below it
%       %
%
%       %   This section is saved (and would be even without the See also
%       %   line) as is the rest of the file.
%       ...
%
%   %%%seealso props.HasProps, props.Prop
%


    mc = metaclass(htobj);
    if ~isa(htobj, 'props.HasProps') || strcmp(mc.Name, 'props.HasProps')
        error('props:autodocError',                                     ...
              'autodoc only works on HasProps subclasses');
    end

    srcfile = which(mc.Name);
    srcfid = fopen(srcfile, 'r');
    tempfid = fopen([tempname '.m'], 'w+');
    classdefline = fgetl(srcfid);
    if ~strcmp(classdefline(1:8), 'classdef')
        error('props:autodocError', 'classdef must be the first line');
    end
    fprintf(tempfid, [escape(classdefline) '\n']);
    commentline = strtrim(fgetl(srcfid));
    seealsoDoc = '';
    keep = true;
    while ~isempty(commentline) && strcmp(commentline(1), '%')
        if length(commentline) > 11 &&                                  ...
                strcmp(commentline(1:12), '%   %%%seealso')
            seealsoDoc = [escape(commentline) '\n'];
            break
        end
        if strcmp(commentline, '%')
            keep = false;
        end
        if keep
            fprintf(tempfid, [escape(commentline) '\n']);
        end
        commentline = strtrim(fgetl(srcfid));
    end
    fprintf(tempfid, '%%\n');
    nmsplit = strsplit(mc.Name, '.');
    fprintf(tempfid, ['%%   ' upper(nmsplit{end}) ' implements '        ...
            '<a href="matlab: help props.HasProps\n'                    ...
            '%%   ">HasProps</a> for dynamic, type-checked <a '         ...
            'href="matlab:\n%%   help props.Prop">'                     ...
            'properties</a>\n%%\n']);

    requiredDoc = '';
    optionalDoc = '';

    seealso = {'props.HasProps'};

    for i = 1:length(htobj.PR__props)
        prop = htobj.(['PR_' htobj.PR__props{i}]);
        propmc = metaclass(prop);
        propdoc = ['%%       ' prop.Name ' (<a href="matlab: help '     ...
                   propmc.Name '">' propmc.Name '</a>)\n'               ...
                   '%%           ' escape(prop.Doc) '\n'];
        if ~isempty(prop.dynamicDoc())
            propdoc = [propdoc '%%           ' escape(prop.dynamicDoc()) '\n'];
        end
        if ~isempty(prop.DefaultValue)
            try
                propdoc = [propdoc '%%           Default: '             ...
                           escape(mat2str(prop.DefaultValue)) '\n'];
            catch
            end
        end
        propdoc = [propdoc '%%\n'];
        if prop.Required
            requiredDoc = [requiredDoc propdoc];
        else
            optionalDoc = [optionalDoc propdoc];
        end
        seealso{end+1} = propmc.Name;
    end

    if ~isempty(requiredDoc)
        requiredDoc = ['%%   REQUIRED PROPERTIES:\n' requiredDoc];
    end
    if ~isempty(optionalDoc)
        optionalDoc = ['%%   OPTIONAL PROPERTIES:\n' optionalDoc];
    end
    if isempty(seealsoDoc)
        seealso = unique(seealso);
        seealsoDoc = ['%%   See also ' strjoin(seealso, ', ') '\n%%\n\n'];
    end
    if isempty(requiredDoc) && isempty(optionalDoc)
        requiredDoc = '%%   ---- CLASS HAS NO PROPERTIES ----\n%%\n';
    end

    fprintf(tempfid, requiredDoc);
    fprintf(tempfid, optionalDoc);
    fprintf(tempfid, seealsoDoc);
    lin = fgetl(srcfid);
    while isempty(lin) || all(lin ~= -1)
        fprintf(tempfid, [escape(lin) '\n']);
        lin = fgetl(srcfid);
    end

    fclose(srcfid);
    fseek(tempfid, 0, -1);
    display(fread(tempfid, inf, '*char')');

    okstring = input('Is the above rewritten file ok? yes/[no]\n?? ', 's');

    if strcmp(okstring, 'yes')
        fseek(tempfid, 0, -1);
        srcfid = fopen(srcfile, 'w');
        fwrite(srcfid, fread(tempfid, inf, '*char'), '*char');
    end


end

function s = escape(s)
    s = strrep(strrep(s, '%', '%%'), '\', '\\');
end

