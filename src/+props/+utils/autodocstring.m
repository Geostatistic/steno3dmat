function docstring = autodocstring(htobj, doctype)
%AUTODOCSTRING This function returns autogenerated prop documentation
%   PROPS.autodocstring(HASPROPSOBJ, DOCTYPE) returns a custom string
%   describing the props of class HASPROPSOBJ. DOCTYPE may be either
%   'matlab' or 'sphinx'
%
%   To aid file writing from MATLAB, % and \ escape
%   characters must be added. If any other unusual characters are present
%   in a class, the user must ensure that they are copied correctly.
%
%   See also props.HasProps, props.Prop
%
    if ~strcmp(doctype, 'matlab') && ~strcmp(doctype, 'sphinx')
        error('props:autodocError', 'doctype must be "matlab" or "sphinx"');
    end

    mc = metaclass(htobj);
    if ~isa(htobj, 'props.HasProps') || strcmp(mc.Name, 'props.HasProps')
        error('props:autodocError',                                     ...
              'autodoc only works on HasProps subclasses');
    end

    nmsplit = strsplit(mc.Name, '.');
    if strcmp(doctype, 'matlab')
        docstring = ['%   ' upper(nmsplit{end}) ' implements '         ...
                '<a href="matlab: help props.HasProps\n'                ...
                '%   ">HasProps</a> for dynamic, type-checked <a '     ...
                'href="matlab:\n%   help props.Prop">'                 ...
                'properties</a>\n%\n'];
    else
        docstring = ['**' nmsplit{end} '** implements '                 ...
                ':ref:`props.HasProps <propshasprops>` for dynamic, '   ...
                'type-checked :ref:`properties <propsprop>`\n\n'];
    end


    requiredDoc = '';
    optionalDoc = '';

    for i = 1:length(htobj.PR__props)
        prop = htobj.(['PR_' htobj.PR__props{i}]);
        propmc = metaclass(prop);
        if strcmp(doctype, 'matlab')
            propdoc = ['%       ' prop.Name ' (<a href="matlab: help ' ...
                       propmc.Name '">' propmc.Name '</a>)\n'           ...
                       '%           ' escape(prop.Doc) '\n'];
        else
            propdoc = ['    **' prop.Name '** (:class:`'           ...
                       propmc.Name '`) - ' escape(prop.Doc)];
        end
        if ~isempty(prop.dynamicDoc(doctype))
            if strcmp(doctype, 'matlab')
                propdoc = [propdoc '%           '                      ...
                           escape(prop.dynamicDoc(doctype)) '\n'];
            else
                propdoc = [propdoc ', ' escape(prop.dynamicDoc(doctype))];
            end
        end
        if ~isempty(prop.DefaultValue)
            try
                if strcmp(doctype, 'matlab')
                    propdoc = [propdoc '%           Default: '         ...
                               escape(mat2str(prop.DefaultValue)) '\n'];
                else
                    propdoc = [propdoc ', Default: '                    ...
                               escape(mat2str(prop.DefaultValue))];
                end
            catch
            end
        end
        if strcmp(doctype, 'matlab')
            propdoc = [propdoc '%\n'];
        else
            propdoc = [propdoc '\n\n'];
        end
        if prop.Required
            requiredDoc = [requiredDoc propdoc];
        else
            optionalDoc = [optionalDoc propdoc];
        end
    end

    if ~isempty(requiredDoc)
        if strcmp(doctype, 'matlab')
            requiredDoc = ['%   REQUIRED PROPERTIES:\n' requiredDoc];
        else
            requiredDoc = ['**Required Properties**:\n\n' requiredDoc];
        end
    end
    if ~isempty(optionalDoc)
        if strcmp(doctype, 'matlab')
            optionalDoc = ['%   OPTIONAL PROPERTIES:\n' optionalDoc];
        else
            optionalDoc = ['**Optional Properties**:\n\n' optionalDoc];
        end
    end
    if isempty(requiredDoc) && isempty(optionalDoc)
        if strcmp(doctype, 'matlab')
            requiredDoc = '%   ---- CLASS HAS NO PROPERTIES ----\n%\n';
        else
            requiredDoc = '**---- Class has no properties ----**\n\n';
        end
    end

    docstring = [docstring requiredDoc, optionalDoc];
end

function s = escape(s)
    s = strrep(strrep(s, '%', '%%'), '\', '\\');
end

