function autodoc(htobj)
%AUTODOC This function auto-documents a HasProps class
%   AUTODOC(HASPROPSOBJ) overwrites the docstring for the class of
%   HASPROPSOBJ with a docstring based on its props.
%
%   WARNING: This function should be used very carefully as it overwrites
%   the documentation in the source file.
%
%   For AUTODOC to work correctly, the first line of the file must be the
%   classdef line. The documentation block must follow immediately after
%   that. AUTODOC keeps all of the documentation block until it encounters
%   a commented line that is empty aside from the starting '%'. It replaces
%   all of the remaining documentation block with autogenerated
%   documentation. If it does not encounter any empty comment lines, it
%   will append the autogenerated documentation to the end of the
%   documentation block. Everything below the first entirely empty line
%   will be maintained.
%
%   In order to maintain consistency when copying the file, % and \ escape
%   characters must be added. If these occur in a non-string context (e.g.
%   using \ for mldivide), they will be replaced with invalid escaped
%   versions.
%
%   Example:
%
%       classdef HasPropsSubClass < props.HasProps
%       %HASPROPSSUBCLASS Class to be autodocumented
%       %   This class has some props and probably does something
%       %   interesting but really it is only here for a documentation
%       %   example. This paragraph will persist during auto-documentation.
%       %
%       %   ALL
%       %   OF
%       %   THIS
%       %   WILL
%       %   BE
%       %   REPLACED!
%       %
%       %   THIS TOO
%       
%       %   This section
%       %   is saved, as is
%       %   all the rest of the file
%       ...
%
%   See also props.HasProps
%

    mc = metaclass(htobj);
    if ~isa(htobj, 'props.HasProps') || strcmp(mc.Name, 'props.HasProps')
        error('props:autodocError',                                     ...
              'autodoc only works on HasProps subclasses');
    end
    
    srcfile = which(mc.Name);
    srcfid = fopen(srcfile, 'r');
    tempfid = fopen([tempname '.m'], 'w+');
    classdefline = fgetl(srcfid);
    if ~strcmp(classdefline(1:8), 'classdef')
        error('props:autodocError', 'classdef must be the first line');
    end
    fprintf(tempfid, [escape(classdefline) '\n']);
    commentline = strtrim(fgetl(srcfid));
    keep = true;
    while ~isempty(commentline) && strcmp(commentline(1), '%')
        if strcmp(commentline, '%')
            keep = false;
        end
        if keep
            fprintf(tempfid, [escape(commentline) '\n']);
        end
        commentline = strtrim(fgetl(srcfid));
    end
    fprintf(tempfid, '%%\n');
    
    requiredDoc = '';
    optionalDoc = '';
    
    seealso = {'props.HasProps'};
    
    for i = 1:length(htobj.PR__props)
        prop = htobj.(['PR_' htobj.PR__props{i}]);
        propmc = metaclass(prop);
        propdoc = ['%%       ' prop.Name ' (' propmc.Name ')\n'          ...
                   '%%           ' escape(prop.Doc) '\n'];
        if ~isempty(prop.dynamicDoc())
            propdoc = [propdoc '%%           ' escape(prop.dynamicDoc()) '\n'];
        end
        propdoc = [propdoc '%%\n'];
        if prop.Required
            requiredDoc = [requiredDoc propdoc];
        else
            optionalDoc = [optionalDoc propdoc];
        end
        seealso{end+1} = propmc.Name;
    end
    
    if ~isempty(requiredDoc)
        requiredDoc = ['%%   REQUIRED PROPERTIES:\n' requiredDoc];
    end
    if ~isempty(optionalDoc)
        optionalDoc = ['%%   OPTIONAL PROPERTIES:\n' optionalDoc];
    end
    seealso = unique(seealso);
    seealsoDoc = ['%%   See also ' strjoin(seealso, ', ') '\n%\n\n'];
    
    fprintf(tempfid, requiredDoc);
    fprintf(tempfid, optionalDoc);
    fprintf(tempfid, seealsoDoc);
    lin = fgetl(srcfid);
    while isempty(lin) || all(lin ~= -1)
        fprintf(tempfid, [escape(lin) '\n']);
        lin = fgetl(srcfid);
    end
        
    fclose(srcfid);
    fseek(tempfid, 0, -1);
    fread(tempfid, inf, '*char')'
    
    okstring = input('Is the above rewritten file ok? yes/[no]\n?? ', 's');
        
    if strcmp(okstring, 'yes')
        fseek(tempfid, 0, -1);
        srcfid = fopen(srcfile, 'w');
        fwrite(srcfid, fread(tempfid, inf, '*char'), '*char');
    end
    
        
end

function s = escape(s)
    s = strrep(strrep(s, '%', '%%'), '\', '\\');
end

